<project
	xmlns="http://maven.apache.org/POM/4.0.0"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">

	<modelVersion>4.0.0</modelVersion>
	<parent>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-dependencies</artifactId>
        <version>1.0.0.RC1</version>
    </parent>

	<groupId>${groupId}</groupId>
	<artifactId>${artifactId}</artifactId>
	<name>${project_name}</name>
	<url>${project_url}</url>
	<version>${version}</version>
	<packaging>pom</packaging>


	<organization>
		<name>${project_organization}</name>
		<url>${project_url}</url>
	</organization>

	<modules>
		<!--
		<module>myModule</module>
		-->
	</modules>

	<repositories>
		<repository>
			<id>Central</id>
			<name>maven central repository</name>
			<url>http://repo1.maven.org/maven2</url>
			<layout>default</layout>
		</repository>

		<repository>
			<id>maven2-repository.cloudera.com</id>
			<name>Cloudera.com maven repository</name>
			<url>https://repository.cloudera.com/content/repositories/releases/</url>
			<layout>default</layout>
		</repository>

		<repository>
			<id>maven2-repository.java.net</id>
			<name>Java.net maven repository</name>
			<url>http://download.java.net/maven/2/</url>
			<layout>default</layout>
		</repository>

		<repository>
			<id>codehaus-snapshots</id>
			<name>CodeHaus Snapshots</name>
			<url>https://nexus.codehaus.org/content/repositories/codehaus-snapshots/</url>
			<releases>
				<enabled>false</enabled>
			</releases>
		</repository>

		<repository>
			<id>elasticsearch-releases</id>
			<name>ElasticSearch Releases Repository</name>
			<url>http://oss.sonatype.org/content/repositories/releases/</url>
		</repository>

		<repository>
			<id>com.levonk</id>
			<name>LevonK Repository</name>
			<url>http://raw.github.com/levonk/pub-maven-repo/master/release</url>
		</repository>
		<repository>
            <id>checker-framework-repo</id>
            <url>http://types.cs.washington.edu/m2-repo</url>
        </repository>
        <repository>
            <id>spring-milestones</id>
            <name>Spring Milestones</name>
            <url>http://repo.spring.io/milestone</url>
            <snapshots>
                <enabled>false</enabled>
            </snapshots>
        </repository>
        <repository>
            <id>spring-snapshots</id>
            <name>Spring Snapshots</name>
            <url>http://maven.springframework.org/snapshot</url>
            <snapshots>
                <enabled>true</enabled>
            </snapshots>
        </repository>
	</repositories>

	<pluginRepositories>
		<pluginRepository>
			<id>maven</id>
			<name>Standard Maven repo</name>
			<url>http://repo1.maven.org/maven2</url>
		</pluginRepository>

		<pluginRepository>
            <id>checker-framework-repo</id>
            <url>http://types.cs.washington.edu/m2-repo</url>
        </pluginRepository>

		<pluginRepository>
			<id>com.levonk</id>
			<name>LevonK Repository</name>
			<url>http://raw.github.com/levonk/pub-maven-repo/master/release</url>
		</pluginRepository>
		<pluginRepository>
            <id>spring-snapshots</id>
            <url>http://repo.spring.io/snapshot</url>
        </pluginRepository>
        <pluginRepository>
            <id>spring-milestones</id>
            <url>http://repo.spring.io/milestone</url>
        </pluginRepository>
  
	</pluginRepositories>

	<dependencies>

		<!-- If you have arbitrary jar that want to deploy into a central maven repository you can use
			 %mvn deploy:deploy-file -DgroupId=levonk-imported -DartifactId=levonk-package \
					-Dversion=1-levonkVersion -Dpackaging=jar -Dfile=otherjar.jar \
					-Durl=scp://maven.levonk.com.:/maven/repo/path -DrepositoryId=levonk.internal
		-->
		<!-- Static Analysis -->
		<dependency>
			<!-- groupId>net.sourceforge.findbugs</groupId -->
			<groupId>com.google.code.findbugs</groupId>
			<artifactId>annotations</artifactId>
			<version>${findbugs-extra.version}</version>
			<scope>compile</scope>
		</dependency>

		<dependency>
			<!-- groupId>net.sourceforge.findbugs</groupId -->
			<groupId>com.google.code.findbugs</groupId>
			<artifactId>jsr305</artifactId>
			<version>${findbugs-extra.version}</version>
			<scope>compile</scope>
		</dependency>

		<dependency>
			<groupId>com.google.guava</groupId>
			<artifactId>guava</artifactId>
			<version>${guava.version}</version>
		</dependency>


			<!-- Apache
			<groupId>org.apache.commons</groupId>
			<artifactId>commons-lang3</artifactId>
			<version>${commonslang3.version}</version>
		</dependency>
         -->
		<!-- Unit Testing Dependencies -->
		<dependency>
			<groupId>org.testng</groupId>
			<artifactId>testng</artifactId>
			<version>${testng.version}</version>
			<scope>test</scope>
			<exclusions>
				<exclusion>
					<groupId>junit</groupId>
					<artifactId>junit</artifactId>
				</exclusion>
			</exclusions>
		</dependency>

		<dependency>
			<groupId>nl.jqno.equalsverifier</groupId>
			<artifactId>equalsverifier</artifactId>
			<version>${equalsverifier.version}</version>
			<scope>test</scope>
		</dependency>

		<!-- Mock framework -->
		<dependency>
			<groupId>org.mockito</groupId>
			<artifactId>mockito-all</artifactId>
			<version>${mockito.version}</version>
			<scope>test</scope>
		</dependency>

		<!-- Logging Dependencies -->
		<dependency>
			<groupId>ch.qos.logback</groupId>
			<artifactId>logback-classic</artifactId>
			<version>${logback.version}</version>
			<scope>runtime</scope>
			<exclusions>
				<exclusion>
					<groupId>org.slf4j</groupId>
					<artifactId>slf4j-api</artifactId>
				</exclusion>
			</exclusions>
		</dependency>
		<dependency>
			<groupId>ch.qos.logback.contrib</groupId>
			<artifactId>logback-jackson</artifactId>
			<version>${logback-jackson.version}</version>
			<exclusions>
                <exclusion>
                    <groupId>ch.qos.logback</groupId>
                    <artifactId>logback-core</artifactId>
                </exclusion>
            </exclusions>
		</dependency>

		<dependency>
			<!-- A JaxB mapper is necessary for logback-ext-json-classic
				you can use others though, it doesn't have to be jackson -->
			<groupId>org.codehaus.jackson</groupId>
			<artifactId>jackson-mapper-asl</artifactId>
			<version>${jackson1.version}</version>
			<scope>runtime</scope>
		</dependency>
		<dependency>
			<groupId>org.slf4j</groupId>
			<artifactId>slf4j-api</artifactId>
			<version>${slf4j.version}</version>
			<scope>runtime</scope>
		</dependency>

		<dependency>
			<!-- Annotations for the standard checkers:
				nullness, interning, mutability -->
			<groupId>types.checkers</groupId>
            <artifactId>checkers-quals</artifactId>
			<version>${checkers.version}</version>
		</dependency>
	</dependencies>


	<!--
		Specify all the version numbers of all dependencies here so we don't
		have to specify them in multiple children.
		The parent will not force this dependency, but it will specify a
		default version number
	-->
	<dependencyManagement>
		<dependencies>

			<!-- Add Cofoja Design By Contract lib when available -->
            <dependency>
				<groupId>org.slfj</groupId>
				<artifactId>jcl-over-slf4j</artifactId>
				<version>${slfj.version}</version>
			</dependency>
            <dependency>
                <groupId>org.springframework</groupId>
                <artifactId>spring-core</artifactId>
                <version>${spring.version}</version>
                <exclusions>
                    <!-- Starters use SLF4J -->
                    <exclusion>
                        <groupId>commons-logging</groupId>
                        <artifactId>commons-logging</artifactId>
                    </exclusion>
                </exclusions>
            </dependency>

                        <dependency>
                                <groupId>org.springframework.boot</groupId>
                                <artifactId>spring-boot</artifactId>
                                <version>${spring-boot.version}</version>
                        </dependency>
                        <dependency>
                                <groupId>org.springframework.boot</groupId>
                                <artifactId>spring-boot-starter</artifactId>
                                <version>${spring-boot.version}</version>
                        </dependency>
                        <dependency>
                                <groupId>org.springframework.boot</groupId>
                                <artifactId>spring-boot-actuator</artifactId>
                                <version>${spring-boot.version}</version>
                        </dependency>
                        <dependency>
                                <groupId>org.springframework.boot</groupId>
                                <artifactId>spring-boot-starter-amqp</artifactId>
                                <version>${spring-boot.version}</version>
                        </dependency>
                        <dependency>
                                <groupId>org.springframework.boot</groupId>
                                <artifactId>spring-boot-starter-aop</artifactId>
                                <version>${spring-boot.version}</version>
                        </dependency>
                        <dependency>
                                <groupId>org.springframework.boot</groupId>
                                <artifactId>spring-boot-starter-actuator</artifactId>
                                <version>${spring-boot.version}</version>
                        </dependency>
                        <dependency>
                                <groupId>org.springframework.boot</groupId>
                                <artifactId>spring-boot-starter-batch</artifactId>
                                <version>${spring-boot.version}</version>
                        </dependency>
                        <dependency>
                                <groupId>org.springframework.boot</groupId>
                                <artifactId>spring-boot-starter-data-jpa</artifactId>
                                <version>${spring-boot.version}</version>
                        </dependency>
                        <dependency>
                                <groupId>org.springframework.boot</groupId>
                                <artifactId>spring-boot-starter-integration</artifactId>
                                <version>${spring-boot.version}</version>
                        </dependency>
                        <dependency>
                                <groupId>org.springframework.boot</groupId>
                                <artifactId>spring-boot-starter-jdbc</artifactId>
                                <version>${spring-boot.version}</version>
                        </dependency>
                        <dependency>
                                <groupId>org.springframework.boot</groupId>
                                <artifactId>spring-boot-starter-jetty</artifactId>
                                <version>${spring-boot.version}</version>
                        </dependency>
                        <dependency>
                                <groupId>org.springframework.boot</groupId>
                                <artifactId>spring-boot-starter-log4j</artifactId>
                                <version>${spring-boot.version}</version>
                        </dependency>
                        <dependency>
                                <groupId>org.springframework.boot</groupId>
                                <artifactId>spring-boot-starter-mobile</artifactId>
                                <version>${spring-boot.version}</version>
                        </dependency>
                        <dependency>
                                <groupId>org.springframework.boot</groupId>
                                <artifactId>spring-boot-starter-redis</artifactId>
                                <version>${spring-boot.version}</version>
                        </dependency>
                        <dependency>
                                <groupId>org.springframework.boot</groupId>
                                <artifactId>spring-boot-starter-security</artifactId>
                                <version>${spring-boot.version}</version>
                        </dependency>
                        <dependency>
                                <groupId>org.springframework.boot</groupId>
                                <artifactId>spring-boot-starter-shell-remote</artifactId>
                                <version>${spring-boot.version}</version>
                        </dependency>
                        <dependency>
                                <groupId>org.springframework.boot</groupId>
                                <artifactId>spring-boot-starter-thymeleaf</artifactId>
                                <version>${spring-boot.version}</version>
                        </dependency>
                        <dependency>
                                <groupId>org.springframework.boot</groupId>
                                <artifactId>spring-boot-starter-tomcat</artifactId>
                                <version>${spring-boot.version}</version>
                        </dependency>
                        <dependency>
                                <groupId>org.springframework.boot</groupId>
                                <artifactId>spring-boot-starter-web</artifactId>
                                <version>${spring-boot.version}</version>
                        </dependency>
                        <dependency>
                                <groupId>org.springframework.boot</groupId>
                                <artifactId>spring-boot-starter-websocket</artifactId>
                                <version>${spring-boot.version}</version>
                        </dependency>

			<!-- Code Generation Dependencies -->
			<dependency>
				<!-- http://pojomatic.sourceforge.net/pojomatic/index.html -->
				<groupId>org.pojomatic</groupId>
				<artifactId>pojomatic</artifactId>
				<version>${pojomatic.version}</version>
			</dependency>

			<dependency>
				<!-- Lombok requires Javac v1.6 compiler or higher -->
				<!-- You still need to doubleclick the lombok.jar
					 file downloaded by maven to install lombok into
					 eclipse.
				-->
				<!-- http://projectlombok.org/features/index.html -->
				<groupId>org.projectlombok</groupId>
				<artifactId>lombok</artifactId>
				<version>${lombok.version}</version>
				<scope>provided</scope>
			</dependency>


		</dependencies>
	</dependencyManagement>

	<build>
		<plugins>
			<!-- General Settings -->
            <!-- Code Coverage -->
            <!-- Don't forget to add a Jenkins
                "Post-build Actions->Folders or files
                containing JaCoCo XML reports:"
                    **/target/site/jacoco/jacoco*.xml
              -->
			<plugin>

				<groupId>org.jacoco</groupId>
				<artifactId>jacoco-maven-plugin</artifactId>
				<version>${jacoco.version}</version>
				<configuration>
                            <dataFile>${project.build.directory}/jacoco.exec</dataFile>
                             <outputDirectory>${project.build.directory}/jacoco-ut</outputDirectory>
                        </configuration>
				<executions>
					<execution>
						<goals>
							<goal>prepare-agent</goal>
						</goals>
					</execution>
					<execution>
						<id>report</id>
						<phase>prepare-package</phase>
						<goals>
							<goal>report</goal>
						</goals>
					</execution>
				</executions>
			</plugin>

			<plugin>
				<!-- compiler version -->
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-compiler-plugin</artifactId>
				<version>${compiler.version}</version>
				<configuration>
					<showDeprecation>true</showDeprecation>
					<showWarnings>true</showWarnings>
					<source>${java.version}</source>
					<target>${java.version}</target>
					<optimize>true</optimize>
					<debug>true</debug>
					<fork>true</fork>
					<meminitial>128m</meminitial>
					<maxmem>512m</maxmem>
				</configuration>
			</plugin>

			<plugin>
				<!-- compiler version -->
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-site-plugin</artifactId>
				<version>${site.version}</version>
			</plugin>

			<!-- Static Analysis Tools -->
			<plugin>
				<groupId>types.checkers</groupId>
                <artifactId>checkers-maven-plugin</artifactId>
				<version>${checkers.version}</version>
				<executions>
					<execution>
						<!-- run the checkers after compilation; this
							can also be any later phase -->
						<phase>process-classes</phase>
						<goals>
							<goal>check</goal>
						</goals>
					</execution>
				</executions>
				<configuration>
					<!-- required configuration options -->
					<!-- a list of processors to run -->
					<processors>
						<processor>checkers.nullness.NullnessChecker</processor>
						<processor>checkers.interning.InterningChecker</processor>
						<processor>checkers.lock.LockChecker</processor>
						<processor>checkers.fenum.FenumChecker</processor>
						<processor>checkers.tainting.TaintingChecker</processor>
						<processor>checkers.regex.RegexChecker</processor>
						<processor>checkers.propkey.PropertyKeyChecker</processor>
						<processor>checkers.i18n.I18nChecker</processor>
						<processor>checkers.compilermsgs.CompilerMessagesChecker</processor>
						<processor>checkers.signature.SignatureChecker</processor>
						<processor>checkers.units.UnitsChecker</processor>
						<processor>checkers.Linear.LinearChecker</processor>
						<processor>checkers.igj.IGJChecker</processor>
						<processor>checkers.javari.JavariChecker</processor>
						<processor>checkers.basic.BasicChecker</processor>
					</processors>

					<!-- Other optional configuration -->
					<!--
						Full path to a java executable that should be used to
						create the forked JVM
					<executable>/opt/java1.6/bin/java</executable>
					-->
					<!--
						Should an error reported by a checker cause a build failure,
						or only be logged as a warning? -->
					<failOnError>false</failOnError>
					<!--
						A list of patterns to include, in teh standard maven syntax.
						defaults to **/*.java
					<includes>
						<include>**/*.java</include>
					</includes>
					-->
					<!--
						A list of patterns to exclude, in the standard maven syntax;
						defaults to an empty list.
					<includes>
						<include>com.foobar/**/*.java</include>
					</includes>
					-->
					<!--
						Additional Parameters passed to the JSR308 java compiler
					<javacParams>-Alint</javacParams>
					-->
					<!--
						Additional parameters to pass to the forked JVM
					<javaParams>-Xdebug</javaParams>
					-->
					<!--
						Versions of checkers to use; defaults to the current newest vesrion
					<checkersVersion>1.4.0</checkersVersion>
					-->

				</configuration>
			</plugin>

			<plugin>
				<!-- Checkstyle -->
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-checkstyle-plugin</artifactId>
				<version>${checkstyle.version}</version>
				<dependencies>
					<dependency>
						<groupId>com.levonk</groupId>
						<artifactId>codequality</artifactId>
						<version>${codequality.version}</version>
					</dependency>
				</dependencies>
				<configuration>
					<configLocation>static-analysis/checkstyle.xml</configLocation>
				</configuration>
			</plugin>

			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-enforcer-plugin</artifactId>
				<version>${enforcer.version}</version>
				<executions>
					<execution>
						<id>enforce-banned-dependencies</id>
						<goals>
							<goal>enforce</goal>
						</goals>
						<configuration>
							<fail>true</fail>
							<rules>
								<bannedDependencies>
									<searchTransitive>true</searchTransitive>
									<excludes>
										<exclude>aspectj:aspectj*</exclude>
										<exclude>commons-lang</exclude>
										<exclude>commons-logging</exclude>
										<exclude>hsqldb:hsqldb</exclude>
										<exclude>javassist:javassist</exclude>
										<exclude>junit:junit</exclude>
										<exclude>log4j:log4j</exclude>
										<exclude>org.slf4j:1.5*</exclude>
										<exclude>org.springframework:2.*</exclude>
										<exclude>org.springframework:3.0.*</exclude>
									</excludes>
								</bannedDependencies>
								<DependencyConvergence/>
								<requireMavenVersion>
									<version>[3.0.3,)</version>
								</requireMavenVersion>
								<requireJavaVersion>
									<version>${java.version}</version>
								</requireJavaVersion>
							</rules>
						</configuration>
					</execution>
				</executions>
			</plugin>

			<plugin>
				<!-- PMD -->
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-pmd-plugin</artifactId>
				<version>${pmd.version}</version>
				<dependencies>
					<dependency>
						<groupId>com.levonk</groupId>
						<artifactId>codequality</artifactId>
						<version>${codequality.version}</version>
					</dependency>
				</dependencies>
				<configuration>
					<rulesets>
						<ruleset>do-not-user/pmd.xml</ruleset>
					</rulesets>
					<targetJdk>${java.version}</targetJdk>
				</configuration>
			</plugin>

			<plugin>
				<!-- Findbugs -->
				<groupId>org.codehaus.mojo</groupId>
				<artifactId>findbugs-maven-plugin</artifactId>
				<version>${findbugs.version}</version>
				<dependencies>
					<dependency>
						<groupId>com.levonk</groupId>
						<artifactId>codequality</artifactId>
						<version>${codequality.version}</version>
					</dependency>
				</dependencies>
				<configuration>
					<excludeFilterFile>do-not-user/findbugs-exclude.xml</excludeFilterFile>
					<threshold>Low</threshold>
				</configuration>
			</plugin>


			<plugin>
				<!--
					Goals:
					cobertura:check
					cobertura:clean
					cobertura:dump-datafile
					cobertura:instrument
					cobertura:cobertura
				-->
				<groupId>org.codehaus.mojo</groupId>
				<artifactId>cobertura-maven-plugin</artifactId>
				<version>${cobertura.version}</version>
				<configuration>
                    <check/>
					<formats>
						<format>xml</format>
					</formats>
				</configuration>
			</plugin>

			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-javadoc-plugin</artifactId>
				<version>2.9.1</version>
				<configuration>
					<docletArtifact>
						<!-- http://code.google.com/p/doclava/wiki/GettingStarted -->
						<groupId>com.google.doclava</groupId>
						<artifactId>doclava</artifactId>
						<version>${doclava.version}</version>
					</docletArtifact>
					<doclet>com.google.doclava.Doclava</doclet>
					<!--
						bootclasspath required by Sun's JVM
					-->
					<bootclasspath>${sun.boot.class.path}</bootclasspath>
                    <useStandardDocletOptions>false</useStandardDocletOptions>
					<additionalparam>
						-quiet
						-federate JDK http://doclava.googlecode.com/svn/static/api/openjdk-6.xml
						-hdf project.name "${project.name}"
						-d ${project.build.directory}/apidocs
					</additionalparam>

					<!-- Apple's JVM sometimes requires more memory -->
					<additionalJOptions>-J-Xmx1024m</additionalJOptions>
				</configuration>
			</plugin>

			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-eclipse-plugin</artifactId>
				<version>${eclipse.version}</version>
				<configuration>
					<downloadSources>true</downloadSources>
					<downloadJavadocs>true</downloadJavadocs>
				</configuration>
			</plugin>

			<plugin>
				<groupId>org.codehaus.mojo</groupId>
				<artifactId>jalopy-maven-plugin</artifactId>
				<version>${jalopy.version}</version>
				<configuration>
					<convention>source-munge/jalopy.xml</convention>
					<failOnError>false</failOnError>
				</configuration>
				<dependencies>
					<dependency>
						<groupId>com.levonk</groupId>
						<artifactId>codequality</artifactId>
						<version>${codequality.version}</version>
					</dependency>
				</dependencies>
			</plugin>

			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-dependency-plugin</artifactId>
				<version>${dependency.version}</version>
				<executions>
					<execution>
					</execution>
				</executions>
			</plugin>

			<plugin>
				<!-- lets get rid .class that are effected through
				inheritance using ant -->
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-antrun-plugin</artifactId>
				<version>${antrun.version}</version>
				<executions>
					<!-- handle regular sources -->
					<execution>
						<id>depend-sources</id>
						<phase>process-sources</phase>
						<configuration>
							<target>
								<depend srcDir="${project.build.sourceDirectory}" destDir="${project.build.outputDirectory}" cache="${project.build.outputDirectory}"/>
							</target>
						</configuration>
						<goals>
							<goal>run</goal>
						</goals>
					</execution>
					<!-- handle test files -->
					<execution>
						<id>depend-test-sources</id>
						<phase>process-test-sources</phase>
						<configuration>
							<target>
								<depend srcDir="${project.build.testSourceDirectory}" destDir="${project.build.testOutputDirectory}" cache="${project.build.testOutputDirectory}" classpath="${project.build.outputDirectory}"/>
							</target>
						</configuration>
						<goals>
							<goal>run</goal>
						</goals>
					</execution>
				</executions>
			</plugin>


		<!-- testing -->
		<!--
			Tests are divided into three categories:
			1. Very fast Unit Tests (default) - run often in development
			2. slower integration but self-sufficent tests (Spring context and/or H2 Database - run before commits
			3. real integration tests (requiring remote servers) - run by CI Server

			You can seperate tests by adding the annotation
			@Test(groups = "self-integration")
			or
			@Test(groups = "full-integration")
			http://www.javacodegeeks.com/2012/04/testng-and-maven-configuration-guide.html
		-->
		<plugin>
			<groupId>org.apache.maven.plugins</groupId>
			<artifactId>maven-surefire-plugin</artifactId>
			<version>${surefire.version}</version>
			<executions>
				<execution>
					<!-- Override default configuration, which treats all tests the same -->
					<id>default-test</id>
					<configuration>
						<excludedGroups>self-integration,full-integration</excludedGroups>
					</configuration>
				</execution>
				<execution>
					<id>self-integration</id>
					<phase>integration-test</phase>
					<goals>
						<goal>test</goal>
					</goals>
					<configuration>
						<groups>self-integration</groups>
						<reportsDirectory>target/self-integration-surefire-reports/</reportsDirectory>
					</configuration>
				</execution>
			</executions>
		</plugin>
</plugins>
		<pluginManagement>
			<plugins>
				<!-- android plugin -->
				<plugin>
					<groupId>com.jayway.maven.plugins.android.generation2</groupId>
					<artifactId>maven-android-plugin</artifactId>
					<version>${android.version}</version>
				</plugin>
				<plugin>
                    <artifactId>maven-jar-plugin</artifactId>
                    <configuration>
                	    <archive>
                    	    <manifest>
                        	    <mainClass>${start-class}</mainClass>
                            </manifest>
                        </archive>
                    </configuration>
                </plugin>
				<plugin>
                    <groupId>org.codehaus.mojo</groupId>
                    <artifactId>exec-maven-plugin</artifactId>
                    <configuration>
                        <mainClass>${start-class}</mainClass>
                    </configuration>
                </plugin>
				<plugin>
                	<groupId>pl.project13.maven</groupId>
                    <artifactId>git-commit-id-plugin</artifactId>
                    <version>2.1.7</version>
                    <executions>
                    	<execution>
                        	<goals>
                            	<goal>revision</goal>
                            </goals>
                        </execution>
                        </executions>
                        <configuration>
                                <verbose>true</verbose>
                                <dateFormat>yyyy-MM-dd'T'HH:mm:ssZ</dateFormat>
                                <generateGitPropertiesFile>true</generateGitPropertiesFile>
                                <generateGitPropertiesFilename>src/main/resources/git.properties</generateGitPropertiesFilename>
                        </configuration>
                </plugin>
                <plugin>
                    <groupId>org.springframework.boot</groupId>
                    <artifactId>spring-boot-maven-plugin</artifactId>
                    <configuration>
                        <mainClass>${start-class}</mainClass>
                        <layout>ZIP</layout>
                    </configuration>
                    <executions>
                        <execution>
                            <goals>
                                <goal>repackage</goal>
                            </goals>
                        </execution>
                    </executions>
                </plugin>

			</plugins>
		</pluginManagement>
	</build>

	<reporting>
		<outputDirectory>./target/site</outputDirectory>
		<plugins>
			<plugin>
				<!-- http://code.google.com/p/testability-explorer/wiki/Readme
					see available options by running
					mvn help:describe -Dplugin=com.google.testability-explorer:maven2-testability-plugin -Ddetail
					-->
				<groupId>com.google.testability-explorer</groupId>
				<artifactId>maven-testability-plugin</artifactId>
				<version>1.3.3</version>
			</plugin>
			<!-- doc -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-javadoc-plugin</artifactId>
				<version>${javadoc.version}</version>
			</plugin>
			<!-- testing -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-surefire-report-plugin</artifactId>
				<version>${surefire.version}</version>
			</plugin>
			<!-- static analysis -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-checkstyle-plugin</artifactId>
				<version>${checkstyle.version}</version>
			</plugin>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-pmd-plugin</artifactId>
				<version>${pmd.version}</version>
			</plugin>
			<plugin>
				<groupId>org.codehaus.mojo</groupId>
				<artifactId>cobertura-maven-plugin</artifactId>
				<version>${cobertura.version}</version>
				<configuration>
					<formats>
						<format>xml</format>
					</formats>
                    <check>          </check>
                </configuration>
			</plugin>
			<plugin>
				<groupId>org.codehaus.mojo</groupId>
				<artifactId>findbugs-maven-plugin</artifactId>
				<version>${findbugs.version}</version>
			</plugin>
		</plugins>
	</reporting>

	<properties>
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
		<java.version>1.7</java.version>
		<!-- version block -->
		<android.version>2.8.4</android.version>
		<antrun.version>1.7</antrun.version>
		<codequality.version>1.0.9</codequality.version>
		<checkers.version>1.7.2</checkers.version> <!-- as of 2014-01-22 -->
 		<spring-boot.version>1.0.0.RC1</spring-boot.version>
		<checkstyle.version>2.9.1</checkstyle.version>
		<cobertura.version>2.5.2</cobertura.version>
		<commonslang3.version>3.2.1</commonslang3.version>
		<compiler.version>3.1</compiler.version>
		<dependency.version>2.8</dependency.version>
		<doclava.version>2.9.1</doclava.version>
		<eclipse.version>2.9</eclipse.version>
		<enforcer.version>1.3.1</enforcer.version>
		<equalsverifier.version>1.3.1</equalsverifier.version>
		<findbugs.version>2.5.2</findbugs.version>
		<findbugs-extra.version>1.3.9</findbugs-extra.version>
		<guava.version>16.0</guava.version>
		<jackson1.version>1.9.13</jackson1.version>
		<jacoco.version>0.6.4.201312101107</jacoco.version>
		<jalopy.version>1.0-alpha-1</jalopy.version>
		<javadoc.version>2.9.1</javadoc.version>
		<logback.version>1.0.13</logback.version>
		<logback-jackson.version>0.1.2</logback-jackson.version>
		<lombok.version>1.12.5</lombok.version>
		<mockito.version>1.9.5</mockito.version>
		<pmd.version>3.0.1</pmd.version>
		<pojomatic.version>1.0</pojomatic.version>
		<site.version>3.2</site.version>
		<slf4j.version>1.7.5</slf4j.version> <!-- as of 2012-09-17 -->
		<surefire.version>2.16</surefire.version> <!-- as of 2011-04-06 -->
		<testng.version>6.8.7</testng.version>
        <start-class>com.disney.jarvis.springboot.App</start-class>
	</properties>

	<!-- vim: set noexpandtab tabstop=4 shiftwidth=4: -->
</project>
